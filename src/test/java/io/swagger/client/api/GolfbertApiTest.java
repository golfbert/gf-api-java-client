/**
 * Golfbert API
 * This API allows you to access rich golf course information, including gps coordinates and geo polygons of courses holes. This API can only be used in conjunction with a valid api token, access key and secret. More information can be found [here](https://golfbert.com/api).
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Course;
import io.swagger.client.model.GeneralErrorResponse;
import io.swagger.client.model.Hole;
import io.swagger.client.model.Scorecard;
import io.swagger.client.model.Courseteebox;
import io.swagger.client.model.Holepolygon;
import io.swagger.client.model.Holeteebox;
import io.swagger.client.model.PingResponse;
import io.swagger.client.model.Listofcourses;

import org.junit.Test;
import org.junit.Before;

import io.swagger.client.ApiClient;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.nio.charset.StandardCharsets;

/**
 * API tests for GolfbertApi
 */
public class GolfbertApiTest {

    private GolfbertApi api = new GolfbertApi();

    @Before
    public void setUp() {
    }

    /**
     * v1/courses/_id_
     *
     * Retrieves a course&#39;s details. This call expands on the information returned by the course listings call.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCourseTest() throws ApiException {
        Integer id = 4;

        Course response = api.getCourse(id);

        System.out.println("getCourse - name: " + response.getName());
    }

    /**
     * v1/holes/_id_
     *
     * Retrieves a hole&#39;s details including geo information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHoleTest() throws ApiException {
        Integer id = null;
        // Hole response = api.getHole(id);

        // TODO: test validations
    }

    /**
     * v1/courses/_id_/scorecard
     *
     * Retrieves a course&#39;s scorecard. An example of information returned can be found [here.](http://golfbert.com/courses/scorecard/17078)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScorecardTest() throws ApiException {
        Integer id = null;
        // Scorecard response = api.getScorecard(id);

        // TODO: test validations
    }

    /**
     * v1/courses/_id_/teeboxes
     *
     * Retrieves a course&#39;s teeboxes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCourseTeeboxesForCourseTest() throws ApiException {
        Integer id = null;
        // List<Courseteebox> response = api.listCourseTeeboxesForCourse(id);

        // TODO: test validations
    }

    /**
     * v1/courses
     *
     * Retrieves a paginated list of courses. The request can be further parameterized to filter courses by name, city, state, zipcode, or gps coordinates. General course information can be found [here.](http://golfbert.com/courses/search)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCoursesTest() throws ApiException {
        Integer limit = 5;
        Integer marker = null;
        String name = null;
        String city = null;
        String state = null;
        String zipcode = null;
        Double lat = null;
        Double _long = null;

        Listofcourses response = api.listCourses(limit, marker, name, city, state, zipcode, lat, _long);

        for(Course course: response.getResources()) {
          System.out.println("listCourses - id: " + course.getId() + ", name: " + course.getName());
        }
    }

    /**
     * v1/teeboxcolors
     *
     * Retrieves all available teebox colors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFlagColorsTest() throws ApiException {
        // List<String> response = api.listFlagColors();

        // TODO: test validations
    }

    /**
     * v1/holes
     *
     * Retrieves a paginated list of holes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHolesTest() throws ApiException {
        Integer courseId = null;
        Integer limit = null;
        Integer marker = null;
        // List<Hole> response = api.listHoles(courseId, limit, marker);

        // TODO: test validations
    }

    /**
     * v1/courses/_id_/holes
     *
     * Retrieves a course&#39;s holes&#39; information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listHolesForCourseTest() throws ApiException {
        Integer id = null;
        // List<Hole> response = api.listHolesForCourse(id);

        // TODO: test validations
    }

    /**
     * v1/holes/_id_/polygons
     *
     * Retrieves a holes&#39;s polygons. This information can be used to render the hole accurately on top of a map.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPolygonsForHoleTest() throws ApiException {
        Integer id = null;
        // List<Holepolygon> response = api.listPolygonsForHole(id);

        // TODO: test validations
    }

    /**
     * v1/teeboxtypes
     *
     * Retrieves all available teebox types. This serves as an enum of all available teebox types
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTeeboxTypesTest() throws ApiException {
        // List<String> response = api.listTeeboxTypes();

        // TODO: test validations
    }

    /**
     * v1/holes/_id_/teeboxes
     *
     * Retrieves a holes&#39;s teeboxes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTeeboxesForHoleTest() throws ApiException {
        Integer id = null;
        String color = null;
        String teeboxtype = null;
        Integer par = null;
        Integer handicap = null;
        // List<Holeteebox> response = api.listTeeboxesForHole(id, color, teeboxtype, par, handicap);

        // TODO: test validations
    }

    /**
     * v1/ping
     *
     * Pings the Golfbert API to determine status. A 200-type of response signifies success.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        //PingResponse response = api.ping();
    }
}
