/**
 * Golfbert API
 * This API allows you to access rich golf course information, including gps coordinates and geo polygons of courses holes. This API can only be used in conjunction with a valid api token, access key and secret. More information can be found [here](https://golfbert.com/api).
 *
 * OpenAPI spec version: 1.0.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Point;
import java.util.ArrayList;
import java.util.List;


/**
 * Holepolygon
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-04-16T22:14:27.256-07:00")
public class Holepolygon   {
  @SerializedName("holeid")
  private Integer holeid = null;

  @SerializedName("surfacetype")
  private String surfacetype = null;

  @SerializedName("polygon")
  private List<Point> polygon = new ArrayList<Point>();

  public Holepolygon holeid(Integer holeid) {
    this.holeid = holeid;
    return this;
  }

   /**
   * Get holeid
   * @return holeid
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public Integer getHoleid() {
    return holeid;
  }

  public void setHoleid(Integer holeid) {
    this.holeid = holeid;
  }

  public Holepolygon surfacetype(String surfacetype) {
    this.surfacetype = surfacetype;
    return this;
  }

   /**
   * Get surfacetype
   * @return surfacetype
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getSurfacetype() {
    return surfacetype;
  }

  public void setSurfacetype(String surfacetype) {
    this.surfacetype = surfacetype;
  }

  public Holepolygon polygon(List<Point> polygon) {
    this.polygon = polygon;
    return this;
  }

  public Holepolygon addPolygonItem(Point polygonItem) {
    this.polygon.add(polygonItem);
    return this;
  }

   /**
   * Get polygon
   * @return polygon
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<Point> getPolygon() {
    return polygon;
  }

  public void setPolygon(List<Point> polygon) {
    this.polygon = polygon;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Holepolygon holepolygon = (Holepolygon) o;
    return Objects.equals(this.holeid, holepolygon.holeid) &&
        Objects.equals(this.surfacetype, holepolygon.surfacetype) &&
        Objects.equals(this.polygon, holepolygon.polygon);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holeid, surfacetype, polygon);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Holepolygon {\n");
    
    sb.append("    holeid: ").append(toIndentedString(holeid)).append("\n");
    sb.append("    surfacetype: ").append(toIndentedString(surfacetype)).append("\n");
    sb.append("    polygon: ").append(toIndentedString(polygon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

