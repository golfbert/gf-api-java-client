/**
 * Golfbert API
 * This API allows you to access rich golf course information, including gps coordinates and geo polygons of courses holes. This API can only be used in conjunction with a valid api token, access key and secret. More information can be found [here](https://golfbert.com/api).
 *
 * OpenAPI spec version: 1.0.13
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Course;
import io.swagger.client.model.GeneralErrorResponse;
import io.swagger.client.model.Hole;
import io.swagger.client.model.Scorecard;
import io.swagger.client.model.Listofcourseteeboxes;
import io.swagger.client.model.Listofcourses;
import io.swagger.client.model.Listofteeboxcolors;
import io.swagger.client.model.Listofholes;
import io.swagger.client.model.Listofholepolygons;
import io.swagger.client.model.Listofteeboxtypes;
import io.swagger.client.model.Listofholeteeboxes;
import io.swagger.client.model.Ping;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GolfbertApi {
    private ApiClient apiClient;

    public GolfbertApi() {
        this(Configuration.getGolfbertApiClient());
    }

    public GolfbertApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getCourse */
    private com.squareup.okhttp.Call getCourseCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCourse(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/courses/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/courses/{id}
     * Retrieves a course&#39;s details. This call expands on the information returned by the course listings call.
     * @param id the id of the course whose information to be returned (required)
     * @return Course
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Course getCourse(Integer id) throws ApiException {
        ApiResponse<Course> resp = getCourseWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * v1/courses/{id}
     * Retrieves a course&#39;s details. This call expands on the information returned by the course listings call.
     * @param id the id of the course whose information to be returned (required)
     * @return ApiResponse&lt;Course&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Course> getCourseWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getCourseCall(id, null, null);
        Type localVarReturnType = new TypeToken<Course>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/courses/{id} (asynchronously)
     * Retrieves a course&#39;s details. This call expands on the information returned by the course listings call.
     * @param id the id of the course whose information to be returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCourseAsync(Integer id, final ApiCallback<Course> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCourseCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Course>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getHole */
    private com.squareup.okhttp.Call getHoleCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getHole(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/holes/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/holes/{id}
     * Retrieves a hole&#39;s details including geo information
     * @param id the hole id (required)
     * @return Hole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Hole getHole(Integer id) throws ApiException {
        ApiResponse<Hole> resp = getHoleWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * v1/holes/{id}
     * Retrieves a hole&#39;s details including geo information
     * @param id the hole id (required)
     * @return ApiResponse&lt;Hole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Hole> getHoleWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getHoleCall(id, null, null);
        Type localVarReturnType = new TypeToken<Hole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/holes/{id} (asynchronously)
     * Retrieves a hole&#39;s details including geo information
     * @param id the hole id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHoleAsync(Integer id, final ApiCallback<Hole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHoleCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Hole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getScorecard */
    private com.squareup.okhttp.Call getScorecardCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getScorecard(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/courses/{id}/scorecard".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/courses/{id}/scorecard
     * Retrieves a course&#39;s scorecard. An example of information returned can be found [here.](http://golfbert.com/courses/scorecard/17078)
     * @param id the course id whose scorecard to return (required)
     * @return Scorecard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Scorecard getScorecard(Integer id) throws ApiException {
        ApiResponse<Scorecard> resp = getScorecardWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * v1/courses/{id}/scorecard
     * Retrieves a course&#39;s scorecard. An example of information returned can be found [here.](http://golfbert.com/courses/scorecard/17078)
     * @param id the course id whose scorecard to return (required)
     * @return ApiResponse&lt;Scorecard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Scorecard> getScorecardWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getScorecardCall(id, null, null);
        Type localVarReturnType = new TypeToken<Scorecard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/courses/{id}/scorecard (asynchronously)
     * Retrieves a course&#39;s scorecard. An example of information returned can be found [here.](http://golfbert.com/courses/scorecard/17078)
     * @param id the course id whose scorecard to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScorecardAsync(Integer id, final ApiCallback<Scorecard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScorecardCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Scorecard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listCourseTeeboxesForCourse */
    private com.squareup.okhttp.Call listCourseTeeboxesForCourseCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listCourseTeeboxesForCourse(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/courses/{id}/teeboxes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/courses/{id}/teeboxes
     * Retrieves a course&#39;s teeboxes.
     * @param id the course id (required)
     * @return Listofcourseteeboxes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofcourseteeboxes listCourseTeeboxesForCourse(Integer id) throws ApiException {
        ApiResponse<Listofcourseteeboxes> resp = listCourseTeeboxesForCourseWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * v1/courses/{id}/teeboxes
     * Retrieves a course&#39;s teeboxes.
     * @param id the course id (required)
     * @return ApiResponse&lt;Listofcourseteeboxes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofcourseteeboxes> listCourseTeeboxesForCourseWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = listCourseTeeboxesForCourseCall(id, null, null);
        Type localVarReturnType = new TypeToken<Listofcourseteeboxes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/courses/{id}/teeboxes (asynchronously)
     * Retrieves a course&#39;s teeboxes.
     * @param id the course id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCourseTeeboxesForCourseAsync(Integer id, final ApiCallback<Listofcourseteeboxes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCourseTeeboxesForCourseCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofcourseteeboxes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listCourses */
    private com.squareup.okhttp.Call listCoursesCall(Integer limit, Integer marker, String name, String city, String state, String zipcode, Double lat, Double _long, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/v1/courses/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (marker != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "marker", marker));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (city != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "city", city));
        if (state != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "state", state));
        if (zipcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "zipcode", zipcode));
        if (lat != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "lat", lat));
        if (_long != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "long", _long));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/courses
     * Retrieves a paginated list of courses. The request can be further parameterized to filter courses by name, city, state, zipcode, or gps coordinates. General course information can be found [here.](http://golfbert.com/courses/search)
     * @param limit maximum number of results to return (optional, default to 10)
     * @param marker marker of where to start returning results (in this case course id) (optional, default to 0)
     * @param name return only courses that match this name e.g. Torrey Pines (optional)
     * @param city return only courses within given city e.g. Chicago (optional)
     * @param state return only courses within given state e.g. Alabama (optional)
     * @param zipcode return only courses within given zip code e.g. 99205 (optional)
     * @param lat return only courses within given latitude and longitude. The params lat and long must be specified together otherwise the api will fail (optional)
     * @param _long return only courses within given latitude and longitude. The params lat and long must be specified together otherwise the api will fail (optional)
     * @return Listofcourses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofcourses listCourses(Integer limit, Integer marker, String name, String city, String state, String zipcode, Double lat, Double _long) throws ApiException {
        ApiResponse<Listofcourses> resp = listCoursesWithHttpInfo(limit, marker, name, city, state, zipcode, lat, _long);
        return resp.getData();
    }

    /**
     * v1/courses
     * Retrieves a paginated list of courses. The request can be further parameterized to filter courses by name, city, state, zipcode, or gps coordinates. General course information can be found [here.](http://golfbert.com/courses/search)
     * @param limit maximum number of results to return (optional, default to 10)
     * @param marker marker of where to start returning results (in this case course id) (optional, default to 0)
     * @param name return only courses that match this name e.g. Torrey Pines (optional)
     * @param city return only courses within given city e.g. Chicago (optional)
     * @param state return only courses within given state e.g. Alabama (optional)
     * @param zipcode return only courses within given zip code e.g. 99205 (optional)
     * @param lat return only courses within given latitude and longitude. The params lat and long must be specified together otherwise the api will fail (optional)
     * @param _long return only courses within given latitude and longitude. The params lat and long must be specified together otherwise the api will fail (optional)
     * @return ApiResponse&lt;Listofcourses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofcourses> listCoursesWithHttpInfo(Integer limit, Integer marker, String name, String city, String state, String zipcode, Double lat, Double _long) throws ApiException {
        com.squareup.okhttp.Call call = listCoursesCall(limit, marker, name, city, state, zipcode, lat, _long, null, null);
        Type localVarReturnType = new TypeToken<Listofcourses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/courses (asynchronously)
     * Retrieves a paginated list of courses. The request can be further parameterized to filter courses by name, city, state, zipcode, or gps coordinates. General course information can be found [here.](http://golfbert.com/courses/search)
     * @param limit maximum number of results to return (optional, default to 10)
     * @param marker marker of where to start returning results (in this case course id) (optional, default to 0)
     * @param name return only courses that match this name e.g. Torrey Pines (optional)
     * @param city return only courses within given city e.g. Chicago (optional)
     * @param state return only courses within given state e.g. Alabama (optional)
     * @param zipcode return only courses within given zip code e.g. 99205 (optional)
     * @param lat return only courses within given latitude and longitude. The params lat and long must be specified together otherwise the api will fail (optional)
     * @param _long return only courses within given latitude and longitude. The params lat and long must be specified together otherwise the api will fail (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCoursesAsync(Integer limit, Integer marker, String name, String city, String state, String zipcode, Double lat, Double _long, final ApiCallback<Listofcourses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCoursesCall(limit, marker, name, city, state, zipcode, lat, _long, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofcourses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listFlagColors */
    private com.squareup.okhttp.Call listFlagColorsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/v1/teeboxcolors".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/teeboxcolors
     * Retrieves all available teebox colors
     * @return Listofteeboxcolors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofteeboxcolors listFlagColors() throws ApiException {
        ApiResponse<Listofteeboxcolors> resp = listFlagColorsWithHttpInfo();
        return resp.getData();
    }

    /**
     * v1/teeboxcolors
     * Retrieves all available teebox colors
     * @return ApiResponse&lt;Listofteeboxcolors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofteeboxcolors> listFlagColorsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listFlagColorsCall(null, null);
        Type localVarReturnType = new TypeToken<Listofteeboxcolors>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/teeboxcolors (asynchronously)
     * Retrieves all available teebox colors
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listFlagColorsAsync(final ApiCallback<Listofteeboxcolors> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listFlagColorsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofteeboxcolors>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listHoles */
    private com.squareup.okhttp.Call listHolesCall(Integer courseId, Integer limit, Integer marker, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'courseId' is set
        if (courseId == null) {
            throw new ApiException("Missing the required parameter 'courseId' when calling listHoles(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/holes/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (courseId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "courseId", courseId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (marker != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "marker", marker));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/holes
     * Retrieves a paginated list of holes.
     * @param courseId the course whose holes to return (required)
     * @param limit maximum number of results to return (optional, default to 18)
     * @param marker marker of where to start returning results (in this case hole number) (optional, default to 1)
     * @return Listofholes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofholes listHoles(Integer courseId, Integer limit, Integer marker) throws ApiException {
        ApiResponse<Listofholes> resp = listHolesWithHttpInfo(courseId, limit, marker);
        return resp.getData();
    }

    /**
     * v1/holes
     * Retrieves a paginated list of holes.
     * @param courseId the course whose holes to return (required)
     * @param limit maximum number of results to return (optional, default to 18)
     * @param marker marker of where to start returning results (in this case hole number) (optional, default to 1)
     * @return ApiResponse&lt;Listofholes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofholes> listHolesWithHttpInfo(Integer courseId, Integer limit, Integer marker) throws ApiException {
        com.squareup.okhttp.Call call = listHolesCall(courseId, limit, marker, null, null);
        Type localVarReturnType = new TypeToken<Listofholes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/holes (asynchronously)
     * Retrieves a paginated list of holes.
     * @param courseId the course whose holes to return (required)
     * @param limit maximum number of results to return (optional, default to 18)
     * @param marker marker of where to start returning results (in this case hole number) (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHolesAsync(Integer courseId, Integer limit, Integer marker, final ApiCallback<Listofholes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHolesCall(courseId, limit, marker, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofholes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listHolesForCourse */
    private com.squareup.okhttp.Call listHolesForCourseCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listHolesForCourse(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/courses/{id}/holes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/courses/{id}/holes
     * Retrieves a course&#39;s holes&#39; information.
     * @param id the course id whose holes info to return (required)
     * @return Listofholes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofholes listHolesForCourse(Integer id) throws ApiException {
        ApiResponse<Listofholes> resp = listHolesForCourseWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * v1/courses/{id}/holes
     * Retrieves a course&#39;s holes&#39; information.
     * @param id the course id whose holes info to return (required)
     * @return ApiResponse&lt;Listofholes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofholes> listHolesForCourseWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = listHolesForCourseCall(id, null, null);
        Type localVarReturnType = new TypeToken<Listofholes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/courses/{id}/holes (asynchronously)
     * Retrieves a course&#39;s holes&#39; information.
     * @param id the course id whose holes info to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listHolesForCourseAsync(Integer id, final ApiCallback<Listofholes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listHolesForCourseCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofholes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listPolygonsForHole */
    private com.squareup.okhttp.Call listPolygonsForHoleCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listPolygonsForHole(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/holes/{id}/polygons".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/holes/{id}/polygons
     * Retrieves a holes&#39;s polygons. This information can be used to render the hole accurately on top of a map.
     * @param id the hole id (required)
     * @return Listofholepolygons
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofholepolygons listPolygonsForHole(Integer id) throws ApiException {
        ApiResponse<Listofholepolygons> resp = listPolygonsForHoleWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * v1/holes/{id}/polygons
     * Retrieves a holes&#39;s polygons. This information can be used to render the hole accurately on top of a map.
     * @param id the hole id (required)
     * @return ApiResponse&lt;Listofholepolygons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofholepolygons> listPolygonsForHoleWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = listPolygonsForHoleCall(id, null, null);
        Type localVarReturnType = new TypeToken<Listofholepolygons>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/holes/{id}/polygons (asynchronously)
     * Retrieves a holes&#39;s polygons. This information can be used to render the hole accurately on top of a map.
     * @param id the hole id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPolygonsForHoleAsync(Integer id, final ApiCallback<Listofholepolygons> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPolygonsForHoleCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofholepolygons>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listTeeboxTypes */
    private com.squareup.okhttp.Call listTeeboxTypesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/v1/teeboxtypes".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/teeboxtypes
     * Retrieves all available teebox types. This serves as an enum of all available teebox types
     * @return Listofteeboxtypes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofteeboxtypes listTeeboxTypes() throws ApiException {
        ApiResponse<Listofteeboxtypes> resp = listTeeboxTypesWithHttpInfo();
        return resp.getData();
    }

    /**
     * v1/teeboxtypes
     * Retrieves all available teebox types. This serves as an enum of all available teebox types
     * @return ApiResponse&lt;Listofteeboxtypes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofteeboxtypes> listTeeboxTypesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listTeeboxTypesCall(null, null);
        Type localVarReturnType = new TypeToken<Listofteeboxtypes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/teeboxtypes (asynchronously)
     * Retrieves all available teebox types. This serves as an enum of all available teebox types
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTeeboxTypesAsync(final ApiCallback<Listofteeboxtypes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTeeboxTypesCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofteeboxtypes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for listTeeboxesForHole */
    private com.squareup.okhttp.Call listTeeboxesForHoleCall(Integer id, String color, String teeboxtype, Integer par, Integer handicap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTeeboxesForHole(Async)");
        }


        // create path and map variables
        String localVarPath = "/v1/holes/{id}/teeboxes".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (color != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "color", color));
        if (teeboxtype != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "teeboxtype", teeboxtype));
        if (par != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "par", par));
        if (handicap != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "handicap", handicap));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/holes/{id}/teeboxes
     * Retrieves a holes&#39;s teeboxes.
     * @param id the hole id (required)
     * @param color teebox color to filter by (optional)
     * @param teeboxtype teebox type to filter by (optional)
     * @param par only show holes with a specific par (optional)
     * @param handicap only show holes with a specific handicap (optional)
     * @return Listofholeteeboxes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Listofholeteeboxes listTeeboxesForHole(Integer id, String color, String teeboxtype, Integer par, Integer handicap) throws ApiException {
        ApiResponse<Listofholeteeboxes> resp = listTeeboxesForHoleWithHttpInfo(id, color, teeboxtype, par, handicap);
        return resp.getData();
    }

    /**
     * v1/holes/{id}/teeboxes
     * Retrieves a holes&#39;s teeboxes.
     * @param id the hole id (required)
     * @param color teebox color to filter by (optional)
     * @param teeboxtype teebox type to filter by (optional)
     * @param par only show holes with a specific par (optional)
     * @param handicap only show holes with a specific handicap (optional)
     * @return ApiResponse&lt;Listofholeteeboxes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Listofholeteeboxes> listTeeboxesForHoleWithHttpInfo(Integer id, String color, String teeboxtype, Integer par, Integer handicap) throws ApiException {
        com.squareup.okhttp.Call call = listTeeboxesForHoleCall(id, color, teeboxtype, par, handicap, null, null);
        Type localVarReturnType = new TypeToken<Listofholeteeboxes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/holes/{id}/teeboxes (asynchronously)
     * Retrieves a holes&#39;s teeboxes.
     * @param id the hole id (required)
     * @param color teebox color to filter by (optional)
     * @param teeboxtype teebox type to filter by (optional)
     * @param par only show holes with a specific par (optional)
     * @param handicap only show holes with a specific handicap (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTeeboxesForHoleAsync(Integer id, String color, String teeboxtype, Integer par, Integer handicap, final ApiCallback<Listofholeteeboxes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTeeboxesForHoleCall(id, color, teeboxtype, par, handicap, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Listofholeteeboxes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for ping */
    private com.squareup.okhttp.Call pingCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;


        // create path and map variables
        String localVarPath = "/status".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        // if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        // localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * v1/ping
     * Pings the Golfbert API to determine status. A 200-type of response signifies success.
     * @return Ping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ping ping() throws ApiException {
        ApiResponse<Ping> resp = pingWithHttpInfo();
        return resp.getData();
    }

    /**
     * v1/ping
     * Pings the Golfbert API to determine status. A 200-type of response signifies success.
     * @return ApiResponse&lt;Ping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ping> pingWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pingCall(null, null);
        Type localVarReturnType = new TypeToken<Ping>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * v1/ping (asynchronously)
     * Pings the Golfbert API to determine status. A 200-type of response signifies success.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pingAsync(final ApiCallback<Ping> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pingCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ping>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
